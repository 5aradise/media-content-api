// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: media_content.sql

package database

import (
	"context"
	"database/sql"
)

const createMediaContent = `-- name: CreateMediaContent :one
INSERT INTO media_content 
    (title, description, body, content_type, created_at, user_id)
VALUES 
    ($1, $2, $3, $4, NOW(), $5)
RETURNING id, title, description, body, content_type, created_at, user_id
`

type CreateMediaContentParams struct {
	Title       string
	Description sql.NullString
	Body        string
	ContentType string
	UserID      int32
}

func (q *Queries) CreateMediaContent(ctx context.Context, arg CreateMediaContentParams) (MediaContent, error) {
	row := q.db.QueryRowContext(ctx, createMediaContent,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.ContentType,
		arg.UserID,
	)
	var i MediaContent
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.ContentType,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteMediaContentById = `-- name: DeleteMediaContentById :exec
DELETE FROM media_content
WHERE id = $1
`

func (q *Queries) DeleteMediaContentById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMediaContentById, id)
	return err
}

const getMediaContentById = `-- name: GetMediaContentById :one
SELECT id, title, description, body, content_type, created_at, user_id 
FROM media_content
WHERE id = $1
`

func (q *Queries) GetMediaContentById(ctx context.Context, id int32) (MediaContent, error) {
	row := q.db.QueryRowContext(ctx, getMediaContentById, id)
	var i MediaContent
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.ContentType,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const listMediaContent = `-- name: ListMediaContent :many
SELECT id, title, description, body, content_type, created_at, user_id 
FROM media_content
ORDER BY id
`

func (q *Queries) ListMediaContent(ctx context.Context) ([]MediaContent, error) {
	rows, err := q.db.QueryContext(ctx, listMediaContent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MediaContent
	for rows.Next() {
		var i MediaContent
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.ContentType,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaContentByUserId = `-- name: ListMediaContentByUserId :many
SELECT id, title, description, body, content_type, created_at, user_id 
FROM media_content
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListMediaContentByUserId(ctx context.Context, userID int32) ([]MediaContent, error) {
	rows, err := q.db.QueryContext(ctx, listMediaContentByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MediaContent
	for rows.Next() {
		var i MediaContent
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.ContentType,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
